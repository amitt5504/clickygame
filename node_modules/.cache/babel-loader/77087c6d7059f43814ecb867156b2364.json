{"ast":null,"code":"var _jsxFileName = \"/Users/aaronjmitchell/Desktop/clicky-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport avengers from \"./images.json\";\nimport \"./App.css\";\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Select your team of Avengers to defeat the Mad Titan Thanos! Click on the same one twice and you snaps!\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      avengers,\n      correctGuesses,\n      bestScore,\n      clickMessage\n    };\n\n    this.setClicked = id => {\n      // Make a copy of the state matches array to work with\n      const avengers = this.state.avengers; // Filter for the clicked match\n\n      const selectedAvenger = avengers.filter(avenger => avenger.id === id); // If the matched image's clicked value is already true, \n      // do the game over actions\n\n      if (selectedAvenger[0].selected) {\n        console.log(\"Avengers Team Strength: \" + correctGuesses);\n        console.log(\"Best Team Strength: \" + bestScore);\n        correctGuesses = 0;\n        clickMessage = \"The Mad Titan Thanos continues to reign supreme!\";\n\n        for (let i = 0; i < avengers.length; i++) {\n          avengers[i].selected = false;\n        }\n\n        this.setState({\n          clickMessage\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          avengers\n        }); // Otherwise, if clicked = false, and the user hasn't finished\n      } else if (correctGuesses < 11) {\n        // Set its value to true\n        selectedAvenger[0].selected = true; // increment the appropriate counter\n\n        correctGuesses++;\n        clickMessage = \"You've added a new Avenger to the team! Let's keep this going!\";\n\n        if (correctGuesses > bestScore) {\n          bestScore = correctGuesses;\n          this.setState({\n            bestScore\n          });\n        } // Shuffle the array to be rendered in a random order\n\n\n        avengers.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          avengers\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      } else {\n        selectedAvenger[0].selected = true;\n        correctGuesses = 0;\n        clickMessage = \"Avengers.....ASSEMBLE!!!!\";\n        bestScore = 12;\n        this.setState({\n          bestScore\n        });\n\n        for (let i = 0; i < avengers.length; i++) {\n          avengers[i].selected = false;\n        } // Shuffle the array to be rendered in a random order\n\n\n        avengers.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          avengers\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.clickMessage), React.createElement(Score, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.state.correctGuesses, this.state.bestScore), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Avenge The Fallen\"), this.state.avengers.map(avenger => React.createElement(ImageCard, {\n      setClicked: this.setClicked,\n      id: avenger.id,\n      key: avenger.id,\n      name: avenger.name,\n      image: avenger.image,\n      selected: avenger.selected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aaronjmitchell/Desktop/clicky-game/src/App.js"],"names":["React","Component","ImageCard","Wrapper","Title","Score","avengers","correctGuesses","bestScore","clickMessage","App","state","setClicked","id","selectedAvenger","filter","avenger","selected","console","log","i","length","setState","sort","a","b","Math","random","render","map","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport avengers from \"./images.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Select your team of Avengers to defeat the Mad Titan Thanos! Click on the same one twice and you snaps!\";\n\nclass App extends Component {\n    \n  // Setting this.state.matches to the matches json array\n  state = {\n      avengers,\n      correctGuesses,\n      bestScore,\n      clickMessage\n  };\n\n  setClicked = id => {\n\n      // Make a copy of the state matches array to work with\n      const avengers = this.state.avengers;\n\n      // Filter for the clicked match\n      const selectedAvenger = avengers.filter(avenger => avenger.id === id);\n\n      // If the matched image's clicked value is already true, \n      // do the game over actions\n      if (selectedAvenger[0].selected){\n\n          console.log (\"Avengers Team Strength: \" + correctGuesses);\n          console.log (\"Best Team Strength: \" + bestScore);\n\n          correctGuesses = 0;\n          clickMessage = \"The Mad Titan Thanos continues to reign supreme!\"\n\n          for (let i = 0 ; i < avengers.length ; i++){\n              avengers[i].selected = false;\n          }\n\n          this.setState({clickMessage});\n          this.setState({ correctGuesses });\n          this.setState({avengers});\n\n      // Otherwise, if clicked = false, and the user hasn't finished\n      } else if (correctGuesses < 11) {\n\n          // Set its value to true\n          selectedAvenger[0].selected = true;\n\n          // increment the appropriate counter\n          correctGuesses++;\n          \n          clickMessage = \"You've added a new Avenger to the team! Let's keep this going!\";\n\n          if (correctGuesses > bestScore){\n              bestScore = correctGuesses;\n              this.setState({ bestScore });\n          }\n\n          // Shuffle the array to be rendered in a random order\n          avengers.sort(function(a, b){return 0.5 - Math.random()});\n\n          // Set this.state.matches equal to the new matches array\n          this.setState({ avengers });\n          this.setState({correctGuesses});\n          this.setState({clickMessage});\n      } else {\n\n          selectedAvenger[0].selected = true;\n\n          correctGuesses = 0;\n\n          clickMessage = \"Avengers.....ASSEMBLE!!!!\";\n          bestScore = 12;\n          this.setState({ bestScore });\n          \n          for (let i = 0 ; i < avengers.length ; i++){\n              avengers[i].selected = false;\n          }\n\n          // Shuffle the array to be rendered in a random order\n          avengers.sort(function(a, b){return 0.5 - Math.random()});\n\n          // Set this.state.matches equal to the new matches array\n          this.setState({ avengers });\n          this.setState({correctGuesses});\n          this.setState({clickMessage});\n\n      }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <h3 className=\"message\">\n          {this.state.clickMessage}\n        </h3>\n        <Score>\n          {this.state.correctGuesses}\n          {this.state.bestScore}\n        </Score>\n        <br />\n        <Title>Avenge The Fallen</Title>\n        {this.state.avengers.map(avenger => (\n          <ImageCard\n            setClicked={this.setClicked}\n            id={avenger.id}\n            key={avenger.id}\n            name={avenger.name}\n            image={avenger.image}\n            selected={avenger.selected}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}