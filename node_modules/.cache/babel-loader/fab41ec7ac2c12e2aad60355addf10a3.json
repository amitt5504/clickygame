{"ast":null,"code":"var _jsxFileName = \"/Users/aaronjmitchell/Desktop/clicky-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport images from \"./images.json\";\nimport \"./App.css\";\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Select your team of Avengers to defeat the Mad Titan Thanos! Click on the same one twice and you snaps!\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      avengers,\n      correctGuesses,\n      bestScore,\n      clickMessage\n    };\n\n    this.setClicked = id => {\n      // Make a copy of the state matches array to work with\n      const avengers = this.state.avengers; // Filter for the clicked match\n\n      const selectedAvenger = avengers.filter(avenger => avenger.id === id); // If the matched image's clicked value is already true, \n      // do the game over actions\n\n      if (selectedAvenger[0].selected) {\n        console.log(\"Avengers Team Strength: \" + correctGuesses);\n        console.log(\"Best Team Strength: \" + bestScore);\n        correctGuesses = 0;\n        clickMessage = \"The Mad Titan Thanos continues to reign supreme!\";\n\n        for (let i = 0; i < avengers.length; i++) {\n          avengers[i].selected = false;\n        }\n\n        this.setState({\n          clickMessage\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          avengers\n        }); // Otherwise, if clicked = false, and the user hasn't finished\n      } else if (correctGuesses < 11) {\n        // Set its value to true\n        selectedAvenger[0].selected = true; // increment the appropriate counter\n\n        correctGuesses++;\n        clickMessage = \"You've added a new Avenger to the team! Let's keep this going!\";\n\n        if (correctGuesses > bestScore) {\n          bestScore = correctGuesses;\n          this.setState({\n            bestScore\n          });\n        } // Shuffle the array to be rendered in a random order\n\n\n        matches.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          avengers\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      } else {\n        // Set its value to true\n        selectedAvenger[0].selected = true; // restart the guess counter\n\n        correctGuesses = 0; // Egg on the user to play again\n\n        clickMessage = \"Avengers.....ASSEMBLE!!!!\";\n        bestScore = 12;\n        this.setState({\n          bestScore\n        });\n\n        for (let i = 0; i < matches.length; i++) {\n          matches[i].clicked = false;\n        } // Shuffle the array to be rendered in a random order\n\n\n        matches.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          matches\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      }\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.clickMessage), React.createElement(Score, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Avenge The Fallen\"), this.state.images.map(image => React.createElement(ImageCard, {\n      id: image.id,\n      key: image.id,\n      name: image.name,\n      image: image.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aaronjmitchell/Desktop/clicky-game/src/App.js"],"names":["React","Component","ImageCard","Wrapper","Title","Score","images","correctGuesses","bestScore","clickMessage","App","state","avengers","setClicked","id","selectedAvenger","filter","avenger","selected","console","log","i","length","setState","matches","sort","a","b","Math","random","clicked","render","map","image","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Select your team of Avengers to defeat the Mad Titan Thanos! Click on the same one twice and you snaps!\";\n\nclass App extends Component {\n    \n  // Setting this.state.matches to the matches json array\n  state = {\n      avengers,\n      correctGuesses,\n      bestScore,\n      clickMessage\n  };\n\n  setClicked = id => {\n\n      // Make a copy of the state matches array to work with\n      const avengers = this.state.avengers;\n\n      // Filter for the clicked match\n      const selectedAvenger = avengers.filter(avenger => avenger.id === id);\n\n      // If the matched image's clicked value is already true, \n      // do the game over actions\n      if (selectedAvenger[0].selected){\n\n          console.log (\"Avengers Team Strength: \" + correctGuesses);\n          console.log (\"Best Team Strength: \" + bestScore);\n\n          correctGuesses = 0;\n          clickMessage = \"The Mad Titan Thanos continues to reign supreme!\"\n\n          for (let i = 0 ; i < avengers.length ; i++){\n              avengers[i].selected = false;\n          }\n\n          this.setState({clickMessage});\n          this.setState({ correctGuesses });\n          this.setState({avengers});\n\n      // Otherwise, if clicked = false, and the user hasn't finished\n      } else if (correctGuesses < 11) {\n\n          // Set its value to true\n          selectedAvenger[0].selected = true;\n\n          // increment the appropriate counter\n          correctGuesses++;\n          \n          clickMessage = \"You've added a new Avenger to the team! Let's keep this going!\";\n\n          if (correctGuesses > bestScore){\n              bestScore = correctGuesses;\n              this.setState({ bestScore });\n          }\n\n          // Shuffle the array to be rendered in a random order\n          matches.sort(function(a, b){return 0.5 - Math.random()});\n\n          // Set this.state.matches equal to the new matches array\n          this.setState({ avengers });\n          this.setState({correctGuesses});\n          this.setState({clickMessage});\n      } else {\n\n          // Set its value to true\n          selectedAvenger[0].selected = true;\n\n          // restart the guess counter\n          correctGuesses = 0;\n\n          // Egg on the user to play again\n          clickMessage = \"Avengers.....ASSEMBLE!!!!\";\n          bestScore = 12;\n          this.setState({ bestScore });\n          \n          for (let i = 0 ; i < matches.length ; i++){\n              matches[i].clicked = false;\n          }\n\n          // Shuffle the array to be rendered in a random order\n          matches.sort(function(a, b){return 0.5 - Math.random()});\n\n          // Set this.state.matches equal to the new matches array\n          this.setState({ matches });\n          this.setState({correctGuesses});\n          this.setState({clickMessage});\n\n      }\n  };\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <h3 className=\"message\">\n          {this.state.clickMessage}\n        </h3>\n        <Score></Score>\n        <br />\n        <Title>Avenge The Fallen</Title>\n        {this.state.images.map(image => (\n          <ImageCard\n            id={image.id}\n            key={image.id}\n            name={image.name}\n            image={image.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}